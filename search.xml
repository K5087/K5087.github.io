<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Markdown语法参考</title>
    <url>/nav/categories/%E5%8F%82%E8%80%83%E6%96%87%E6%A1%A3/Markdown%E8%AF%AD%E6%B3%95%E5%8F%82%E8%80%83/</url>
    <content><![CDATA[<h1 id="Typora-中的-Markdown"><a href="#Typora-中的-Markdown" class="headerlink" title="Typora 中的 Markdown"></a>Typora 中的 Markdown</h1><h2 id="概述-Overview"><a href="#概述-Overview" class="headerlink" title="概述 (Overview)"></a>概述 (Overview)</h2><p><strong>Markdown</strong> 是由 <a href="http://daringfireball.net/">Daring Fireball</a> 创造的, 其起始规范在<a href="http://daringfireball.net/projects/markdown/syntax">这里</a>。</p>
<p>它是一种语法,然而在语法和编辑器中有许多不同. <strong>Typora</strong> 使用的是 <a href="https://help.github.com/articles/github-flavored-markdown/">GitHub Flavored Markdown</a>.</p>
<h2 id="块状元素-Block-Elements"><a href="#块状元素-Block-Elements" class="headerlink" title="块状元素 (Block Elements)"></a>块状元素 (Block Elements)</h2><h3 id="段落和行中断-Paragraph-and-line-breaks"><a href="#段落和行中断-Paragraph-and-line-breaks" class="headerlink" title="段落和行中断 (Paragraph and line breaks)"></a>段落和行中断 (Paragraph and line breaks)</h3><p>由一个或多个文字连起来的行称为段落. 在 markdown源中,段落之间由两个(或更多)空白行分割.在Typora中,你只需要一个空白行就可以创建新段落(按一下回车<code>Enter</code>). <strong>Moke注</strong>: <strong><em>常规文本编辑器按两下回车产生两个空白行,再按一次回车,在第三个空白行上写上文字,才算创建一个新段落.</em></strong></p>
<p>按下<code>Shift + Enter</code>才可以单行换行,大多数其他的 Markdown 解析器会忽略单行换行,所以为了让其他解析器意识到你的单行换行,你需要键入两个空格表示行的结束或者键入<code>&lt;br/&gt;</code>. <strong>Moke注</strong>: <strong><em>我并没有测试过其他解析器,在Typora中<code>&lt;br/&gt;</code>仅在视觉效果上产生单行换行,实际文本中并没有单行换行.</em></strong></p>
<h3 id="标题-Headings"><a href="#标题-Headings" class="headerlink" title="标题 (Headings)"></a>标题 (Headings)</h3><p>标题使用1-6个#符号在行的开头. 对应1-6个等级的标题. 例如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section"># 这是h1标题	 		This is an H1</span></span><br><span class="line"></span><br><span class="line"><span class="section">## 这是h2标题			This is an H2</span></span><br><span class="line"></span><br><span class="line"><span class="section">###### 这是h6标题		This is an H6</span></span><br></pre></td></tr></table></figure>
<p>在 Typora 中,输入的’#’代表标题目录,并且键入<code>Enter</code>才能创建一个新的标题.</p>
<h3 id="引用块-Blockquotes"><a href="#引用块-Blockquotes" class="headerlink" title="引用块 (Blockquotes)"></a>引用块 (Blockquotes)</h3><p>Markdown 使用email-sytle(邮件风格?) <code>&gt;</code> 字符来表示引用块.如下所示:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="quote">&gt; 这是一个有两个段落的引用块,这是第一个段落</span></span><br><span class="line"><span class="quote">&gt;</span></span><br><span class="line"><span class="quote">&gt;这是第二个段落. Moke注:我居然翻译不出来这玩意(Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&gt;这是另一个引用块只有一个段落.两个引用块之间有三个空白行</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这是一个有两个段落的引用块,这是第一个段落</p>
<p>这是第二个段落. Moke注:我居然翻译不出来这玩意(Vestibulum enim wisi, viverra nec, fringilla in, laoreet vitae, risus.)</p>
<p>这是另一个引用块只有一个段落.两个引用块之间有三个空白行</p>
</blockquote>
<p>在 Typora 中, 输入<code>&gt;</code>和你得引用内容会产生一个引用块. Typora 会帮你插入一个合适的<code>&gt;</code>或行中断. 继续添加<code>&gt;</code>会产生嵌套的引用块.(一个引用块插入另一个引用块). </p>
<h3 id="列表-List"><a href="#列表-List" class="headerlink" title="列表 (List)"></a>列表 (List)</h3><p>输入<code>* 列表项目</code>会创建一个无序列表,<code>*</code>可以用<code>+</code>或者<code>-</code>替代.</p>
<p>输入<code>1. 列表项目</code>会创建一个有序列表. Markdown代码如下所示</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="section">#### 无序列表</span></span><br><span class="line"><span class="bullet">*</span> 红色</span><br><span class="line"><span class="bullet">*</span> 绿色</span><br><span class="line"><span class="bullet">*</span> 蓝色</span><br><span class="line"></span><br><span class="line"><span class="section">#### 有序列表</span></span><br><span class="line"><span class="bullet">1.</span> 红色</span><br><span class="line"><span class="bullet">2.</span> 绿色</span><br><span class="line"><span class="bullet">3.</span> 蓝色</span><br></pre></td></tr></table></figure>
<h3 id="无序列表"><a href="#无序列表" class="headerlink" title="无序列表"></a>无序列表</h3><ul>
<li>红色</li>
<li>绿色</li>
<li>蓝色</li>
</ul>
<h3 id="有序列表"><a href="#有序列表" class="headerlink" title="有序列表"></a>有序列表</h3><ol>
<li>红色</li>
<li>绿色</li>
<li>蓝色</li>
</ol>
<h3 id="任务列表-Task-List"><a href="#任务列表-Task-List" class="headerlink" title="任务列表 (Task List)"></a>任务列表 (Task List)</h3><p>任务列表是带有[]或[x]标记的项目列表(代表未完成或完成). 例如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> [ ] 一个任务列表项目</span><br><span class="line"><span class="bullet">-</span> [ ] 所需的列表语法</span><br><span class="line"><span class="bullet">-</span> [ ] 正常语法 <span class="strong">**格式化**</span>, @Moke(别艾特我), #1234 类似的</span><br><span class="line"><span class="bullet">-</span> [ ] 未完成项目</span><br><span class="line"><span class="bullet">-</span> [x] 完成项目</span><br></pre></td></tr></table></figure>
<ul>
<li>[ ] 一个任务列表项目</li>
<li>[ ] 所需的列表语法</li>
<li>[ ] 正常语法 <strong>格式化</strong>, @Moke(别艾特我), #1234 类似的</li>
<li>[ ] 未完成项目</li>
<li>[x] 完成项目</li>
</ul>
<p>你可以点击项目前面的复选框来改变项目的 完成/未完成状态.<strong>Moke注</strong>:<strong><em>在博客内的渲染好像有问题.</em></strong></p>
<h3 id="代码块-Fenced-Code-Blocks"><a href="#代码块-Fenced-Code-Blocks" class="headerlink" title="代码块 (Fenced Code Blocks)"></a>代码块 (Fenced Code Blocks)</h3><p>Typora 仅支持GitHub Flavored Markdown中的隔离式代码块. 不支持Markdown中的原始代码块.</p>
<p>使用隔离块很容易: 输入```并且键入回车即可. 在后面添加一个可选的语言标识符我们就可以显示语法高亮:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">这是一个例子:</span><br><span class="line"></span><br><span class="line">```js</span><br><span class="line">function test() &#123;</span><br><span class="line">	console.log(&quot;注意到这个函数之前的空白行了么&quot;);</span><br><span class="line">&#125;</span><br><span class="line">```</span><br><span class="line"></span><br><span class="line">语法高亮:</span><br><span class="line">```ruby</span><br><span class="line">require &#x27;redcaeprt&#x27;</span><br><span class="line">markdown = Redcarpet.new(&quot;你好,世界!&quot;)</span><br><span class="line">puts markdown.to_html</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
<h3 id="数学块-Math-Blocks"><a href="#数学块-Math-Blocks" class="headerlink" title="数学块 (Math Blocks)"></a>数学块 (Math Blocks)</h3><p>你可以使用 <strong>MathJax</strong> 渲染 <em>LaTex</em> 数学公式.</p>
<p>添加一个数学表达式需要键入$$$$并且按下<code>Enter</code>. 这会触发一个接收器接收 <em>Tex/LayTex</em> 输入. 例如:</p>
<script type="math/tex; mode=display">
\mathbf{V}_1 \times \mathbf{V}_2 = \begin{vmatrix}
\mathbf{i} & \mathbf{j} & \mathbf{k} \\
\frac{\partial X}{\partial u} & \frac{\partial Y}{\partial u} & 0 \\
\frac{\partial X}{\partial u} & \frac{\partial Y}{\partial v} & 0 \\
\end{vmatrix}</script><p>在 markdown 源文件中,数学块是被一对$$包装起来的 <em>Laytex</em> 表达式:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">$$</span><br><span class="line">\mathbf&#123;V&#125;<span class="emphasis">_1 \times \mathbf&#123;V&#125;_</span>2 =  \begin&#123;vmatrix&#125;</span><br><span class="line">\mathbf&#123;i&#125; &amp; \mathbf&#123;j&#125; &amp; \mathbf&#123;k&#125; \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial u&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial u&#125; &amp; 0 \\</span><br><span class="line">\frac&#123;\partial X&#125;&#123;\partial v&#125; &amp;  \frac&#123;\partial Y&#125;&#123;\partial v&#125; &amp; 0 \\</span><br><span class="line">\end&#123;vmatrix&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure>
<p>你可以在<a href="https://support.typora.io/Math/">这里</a>找到更多资料.<strong>Moke注</strong>: <strong><em>进去看了一眼,好他妈复杂.</em></strong></p>
<h3 id="表格-Tables"><a href="#表格-Tables" class="headerlink" title="表格 (Tables)"></a>表格 (Tables)</h3><p>输入<code>|第一个标题|第二个标题|</code>并且键入<code>Enter</code>. 就会创建一个两列的表格.</p>
<p>表格创建之后,将光标放在表格上就会在表格上方打开一个工具栏,你可以定义大小,居中或者删除表格, 你也可以使用交互菜单去复制/删除单独的行/列.</p>
<p>下面介绍了表格的完整语法,但是没有必要了解完整的语法,因为表格的Mrakdown源代码是由Typora自动生成的.</p>
<p>在 markdown 源中,它们看起来像:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 第一个表头  | 第二个表头  |</span><br><span class="line">| --------- | --------- |</span><br><span class="line">| 内容单元格  | 内容单元格  |</span><br><span class="line">| 内容单元格  | 内容单元格  |</span><br></pre></td></tr></table></figure>
<p>你也可以在表格中包括内联的markdown,如链接、粗体、斜体或删除线.</p>
<p>最后,你可以在表头行写入冒号<code>:</code>来定义文本在单元格中是左对齐、右对齐或者居中</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">| 左对齐     |    居中   | 右对齐  |</span><br><span class="line">| :-------- | :------: | -----: |</span><br><span class="line">| 第三列是   |  一些文本  |  $1600 |</span><br><span class="line">| 第二列是   |   居中的   |    $12 |</span><br><span class="line">| 竖线      |    整齐    |     $1 |</span><br></pre></td></tr></table></figure>
<p>最左边的冒号代表左对齐,最右边的冒号代表右对齐,两边都有冒号则是居中.</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">左对齐</th>
<th style="text-align:center">居中</th>
<th style="text-align:right">右对齐</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">第三列是</td>
<td style="text-align:center">一些文本</td>
<td style="text-align:right">$1600</td>
</tr>
<tr>
<td style="text-align:left">第二列是</td>
<td style="text-align:center">居中的</td>
<td style="text-align:right">$12</td>
</tr>
<tr>
<td style="text-align:left">竖线</td>
<td style="text-align:center">整齐</td>
<td style="text-align:right">$1</td>
</tr>
</tbody>
</table>
</div>
<h3 id="脚注-Footnotes"><a href="#脚注-Footnotes" class="headerlink" title="脚注 (Footnotes)"></a>脚注 (Footnotes)</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">你可以像这样创建一个脚注[^脚注]</span><br><span class="line"></span><br><span class="line">[<span class="symbol">^脚注</span>]: <span class="link">这是脚注的文本</span></span><br></pre></td></tr></table></figure>
<p>上面的会产生如下效果:</p>
<p>你可以像这样创建一个脚注<sup><a href="#fn_脚注" id="reffn_脚注">脚注</a></sup></p>
<blockquote id="fn_脚注">
<sup>脚注</sup>. 这是脚注的文本<a href="#reffn_脚注" title="Jump back to footnote [脚注] in the text."> &#8617;</a>
</blockquote>
<p>鼠标放在脚注上可以看到链接的脚注内容.</p>
<h3 id="水平分割线-Horizontal-Rules"><a href="#水平分割线-Horizontal-Rules" class="headerlink" title="水平分割线 (Horizontal Rules)"></a>水平分割线 (Horizontal Rules)</h3><p>输入<code>***</code>或者<code>---</code>并键入<code>Enter</code>会产生一条分割线.</p>
<hr>
<h3 id="YAML前置内容-YAML-Front-Matter"><a href="#YAML前置内容-YAML-Front-Matter" class="headerlink" title="YAML前置内容 (YAML Front Matter)"></a>YAML前置内容 (YAML Front Matter)</h3><p>Typora 现在支持 <a href="http://jekyllrb.com/docs/frontmatter/">YAML Front Matter</a>. 在文章顶部输入<code>---</code>并键入<code>Enter</code>会引入一个数据块. 或者你可以,你可以在Typora顶部菜单栏使用插入一个数据块.<strong>Moke注</strong>:<strong><em>在这个文件的最开头.</em></strong></p>
<h3 id="目录-Table-of-Contents"><a href="#目录-Table-of-Contents" class="headerlink" title="目录 (Table of Contents)"></a>目录 (Table of Contents)</h3><p>输入<code>[toc]</code>并键入<code>Enter</code>,这会创建一个标签目录框.TOC获取文档的所有标题.并自动更新你在文档中添加的内容.</p>
<h2 id="跨度元素"><a href="#跨度元素" class="headerlink" title="跨度元素"></a>跨度元素</h2><p>跨度元素将在输入后立即被解析和呈现。将光标移到这些跨度元素的中间会将这些元素扩展成markdown源。下面是对每个跨度元素的语法的解释。</p>
<h3 id="链接-Links"><a href="#链接-Links" class="headerlink" title="链接 (Links)"></a>链接 (Links)</h3><p>Markdown 支持两种格式的链接: 內联和引用.</p>
<p>两种格式都需要一个链接文本框[方括号]</p>
<p>为了创建一个内联链接,你需要立即在链接文本结尾的方括号后立即使用一对圆括号:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个[<span class="string">示例</span>](<span class="link">http://baidu.com/ &quot;标题&quot;</span>)内联链接</span><br><span class="line">[<span class="string">这是链接</span>](<span class="link">http://baidu.com/</span>)没有标题属性</span><br></pre></td></tr></table></figure>
<p>会产生:</p>
<p>这是一个内联链接 <a href="http://baidu.com/" title="标题">示例</a> . (相当于<code>&lt;p&gt;示例&lt;a href=&quot;http://baidu.com/&quot; title=&quot;标题&quot;&gt;</code>)</p>
<p><a href="http://baidu.com/">这个链接</a> 没有标题属性. (相当于<code>&lt;p&gt;&lt;a href=&quot;http://baidu.com/&quot;&gt;这个链接&lt;/a&gt;</code>)</p>
<h4 id="内部链接-Internal-Links"><a href="#内部链接-Internal-Links" class="headerlink" title="内部链接 (Internal Links)"></a>内部链接 (Internal Links)</h4><p><strong>你可以设置一个链接头</strong>, 这会创建一个bookmark允许你点击后跳转到绘画,如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">这个链接</span>](<span class="link">#块状元素-(Block Elements</span>))</span><br></pre></td></tr></table></figure>
<p>Command (在 Windows 平台上是 Ctrl)+鼠标左键单击<a href="#块状元素-Block-Elements">这个链接</a>会跳转到标题<code>块状元素</code>.要看怎么写,请将光标移动到连接上按下<code>⌘</code>(<code>Ctrl</code>)并单击鼠标左键将其展开为 Markdown 源.</p>
<h4 id="参考链接-Reference-Links"><a href="#参考链接-Reference-Links" class="headerlink" title="参考链接 (Reference Links)"></a>参考链接 (Reference Links)</h4><p>参考样式链接使用第二对方括号,里面写你给这个链接选择的标签名来识别链接:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">这是一个参考样式链接[<span class="string">示例</span>][<span class="symbol">标签</span>].</span><br><span class="line"></span><br><span class="line">然后在文档的任何地方,你在一行中定义这个标签链接</span><br><span class="line"></span><br><span class="line">[<span class="symbol">标签</span>]: <span class="link">http://baidu.com/ &quot;可选标题放这里&quot;</span></span><br></pre></td></tr></table></figure>
<p>在 Typora中.他们呈现这样的效果:</p>
<p>这是一个参考样式链接<a href="http://baidu.com/" title="可选标题放这里">示例</a>.</p>
<p>隐含的链接名称快捷方式允许你省略链接的名称,这种情况下,链接文本本身被用作名称.</p>
<p>只需要在方括号留空,例如,链接一个单词”谷歌”到google.com网页,你可以简单的写:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">[<span class="string">谷歌</span>][<span class="symbol"></span>]</span><br><span class="line">并且定义链接</span><br><span class="line"></span><br><span class="line">[<span class="symbol">谷歌</span>]:<span class="link">http:://google.com</span></span><br></pre></td></tr></table></figure>
<p>在 Typora 中,单击这个链接会展开编辑, command(ctrl)+click 会在你的浏览器打开超链接</p>
<h3 id="网址-URLs"><a href="#网址-URLs" class="headerlink" title="网址 (URLs)"></a>网址 (URLs)</h3><p>Typora 允许你插入URLs 作为链接,,用&lt;尖括号&gt;括起.</p>
<p><code>&lt;i@typora.io&gt;</code> 会变成 <a href="&#x6d;&#97;&#105;&#x6c;&#116;&#x6f;&#x3a;&#x69;&#x40;&#x74;&#121;&#x70;&#111;&#114;&#97;&#x2e;&#x69;&#x6f;">&#x69;&#x40;&#x74;&#121;&#x70;&#111;&#114;&#97;&#x2e;&#x69;&#x6f;</a>.</p>
<p>Typora 会自动链接标准网址. e.g.:www.google.com</p>
<h3 id="图像-Images"><a href="#图像-Images" class="headerlink" title="图像 (Images)"></a>图像 (Images)</h3><p>图像的简明语法像个链接,但是需要在链接前增加<code>!</code>符号.插入图像的语法如下所示:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">![<span class="string">文本</span>](<span class="link">/path/toimg.jpg</span>)</span><br><span class="line"></span><br><span class="line">![<span class="string">文本</span>](<span class="link">/path/to/img.jpg &quot;可选标题&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>你也可以拖放图像文件进行插入,点击图像来修改 markdown 源代码.如果使用拖放方式添加的图像与你当前编辑的文档在同一目录或子目录下,则将使用相对路径.</p>
<p>如果你使用 markdown 来构建网站,你可以在 YAML Front Matters 中使用用属性<code>typora-root-url</code>为本地电脑上的图片预览指定一个URL前缀. 例如,在 YAML Front Matters  中输入<br><code>typora-root-url:/User/Abner/Website/typora.io/</code>然后<code>![alt](/blog/img/test.png)</code> 会被转换为<br><code>![alt](file:///User/Abner/Website/typora.io/blog/img/test.png)</code>.</p>
<p>在<a href="https://support.typora.io/Images/">这里</a>你可以找到更多详情.</p>
<h3 id="强调-Emphasis"><a href="#强调-Emphasis" class="headerlink" title="强调 (Emphasis)"></a>强调 (Emphasis)</h3><p>Mrakdown 将星号(<code>*</code>)和下划线(<code>_</code>)作为强调标志.被一个<code>*</code>或者<code>_</code>包裹的文本会被HTML的&lt;<code>em</code>&gt;标签包围</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="emphasis">*星号标志*</span></span><br><span class="line"></span><br><span class="line"><span class="emphasis">_下划线标志_</span></span><br></pre></td></tr></table></figure>
<p>输出:</p>
<p><em>星号标志</em></p>
<p><em>下划线标志</em></p>
<p>GFM 会忽略文本中的下划线,因为下划线经常用于代码中的变量名称:</p>
<blockquote>
<p>wow_great_stuff</p>
<p>do_this_and_that_and_another_thing</p>
</blockquote>
<p>为了在某个位置写入星号或下划线而避免被当作强调标志,你可以使用反斜线符号避免它:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">\<span class="emphasis">*这段文本被反斜线环绕\*</span></span><br></pre></td></tr></table></figure>
<p>*这段文本被反斜线环绕*</p>
<p>Typora 推荐使用 <code>*</code> 符号作为强调标志.</p>
<h3 id="加粗-Strong"><a href="#加粗-Strong" class="headerlink" title="加粗 (Strong)"></a>加粗 (Strong)</h3><p>被两个 <code>*</code> 或者 <code>_</code> 围起来的内容会被HTML <code>strong</code> 标签包裹,例如:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">**两个星号**</span><br><span class="line"></span><br><span class="line">__两个下划线__</span><br></pre></td></tr></table></figure>
<p>输出:</p>
<p><strong>两个星号</strong></p>
<p><strong>两个下划线</strong></p>
<p>Typora 推荐使用 <code>**</code> 符号.</p>
<h3 id="代码-Code"><a href="#代码-Code" class="headerlink" title="代码 (Code)"></a>代码 (Code)</h3><p>要表是代码的内联跨度,请使用单引号包裹它,与预先格式化的代码块不同,代码跨度表示正常段落中的代码. 比如:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">使用<span class="code">`printf()`</span>函数.</span><br></pre></td></tr></table></figure>
<p>会产生:</p>
<p>使用<code>printf()</code>函数.</p>
<h3 id="删除线-Strikethrough"><a href="#删除线-Strikethrough" class="headerlink" title="删除线 (Strikethrough)"></a>删除线 (Strikethrough)</h3><p>GFM 增加了创建删除线文本的语法,Markdown中没有这条.</p>
<p><code>~~删除线文本~~</code> 会变成 <del>删除线文本</del></p>
<h3 id="表情符号-Emoji-smile"><a href="#表情符号-Emoji-smile" class="headerlink" title="表情符号 (Emoji :smile:)"></a>表情符号 (Emoji :smile:)</h3><p>输入表情的语法: <code>:smile:</code></p>
<p>按下<code>ESC</code>可以触发表情符号的自动补全,或者在偏好面板启用启用后自动触发. 当然,通过菜单栏的<code>编辑</code>-&gt;<code>表情符号</code>也可以直接输入UTF-8字符(macOS).</p>
<h3 id="内联公式-Inline-Math"><a href="#内联公式-Inline-Math" class="headerlink" title="内联公式 (Inline Math)"></a>内联公式 (Inline Math)</h3><p>要使用这个特性,请在<code>偏好设置</code>面板-&gt;<code>Markdown</code>标签页启用它,使用<script type="math/tex">`来包裹一个 Tex 命令.例如: `$\lim_{x \to \infty} \exp(-x) = 0</script>会显示为 LaTex命令</p>
<p>为了触发预览内联数学公式:输入”$”后按<code>ESC</code>,然后输入一个TeX命令.</p>
<p>你可以在<a href="https://support.typora.io/Math/">这里</a>找到更多信息.</p>
<h3 id="下标-Subscript"><a href="#下标-Subscript" class="headerlink" title="下标 (Subscript)"></a>下标 (Subscript)</h3><p>要使用这个特性,请在<code>偏好设置</code>面板-&gt;<code>Markdown</code>标签页启用它,然后使用<code>~</code>包裹下标内容.例如:<code>H~2~O</code>,<code>X~long\ text~</code>/</p>
<h3 id="上标-Superscript"><a href="#上标-Superscript" class="headerlink" title="上标 (Superscript)"></a>上标 (Superscript)</h3><p>要使用这个特性,请在<code>偏好设置</code>面板-&gt;<code>Markdown</code>标签页启用它,然后使用<code>^</code>包裹上标内容.例如 <code>X^2^</code>.</p>
<h3 id="高亮-Highlight"><a href="#高亮-Highlight" class="headerlink" title="高亮 (Highlight)"></a>高亮 (Highlight)</h3><p>要使用这个特性,请在<code>偏好设置</code>面板-&gt;<code>Markdown</code>标签页启用它,然后使用<code>==</code>包裹高亮内容.例如 <code>==highlight==</code>.</p>
<h2 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h2><p>你可以使用HTML格式的内容来设计Markdown不受支持的内容. 比如,使用<code>&lt;span style=&quot;color:red&quot;&gt;this text is red&lt;/span&gt;</code>来添加一段红色文本</p>
<h3 id="插入内容-Embed-Contents"><a href="#插入内容-Embed-Contents" class="headerlink" title="插入内容 (Embed Contents)"></a>插入内容 (Embed Contents)</h3><p>一些网站提供基于iframe的嵌入代码,你可以将其粘贴到Typora中,例:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">height</span>=<span class="string">&#x27;265&#x27;</span> <span class="attr">scrolling</span>=<span class="string">&#x27;no&#x27;</span> <span class="attr">title</span>=<span class="string">&#x27;Fancy Animated SVG Menu&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;http://codepen.io/jeangontijo/embed/OxVywj/?height=265&amp;theme-id=0&amp;default-tab=css,result&amp;embed-version=2&#x27;</span> <span class="attr">frameborder</span>=<span class="string">&#x27;no&#x27;</span> <span class="attr">allowtransparency</span>=<span class="string">&#x27;true&#x27;</span> <span class="attr">allowfullscreen</span>=<span class="string">&#x27;true&#x27;</span> <span class="attr">style</span>=<span class="string">&#x27;width: 100%;&#x27;</span>&gt;</span></span><span class="language-xml"><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="视频-Viedo"><a href="#视频-Viedo" class="headerlink" title="视频 (Viedo)"></a>视频 (Viedo)</h3><p>你可以使用<code>&lt;viedo&gt;</code>的 HTML 标签来包裹视频,例:</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">video</span> <span class="attr">src</span>=<span class="string">&quot;xxx.mp4&quot;</span> /&gt;</span></span></span><br></pre></td></tr></table></figure>
<h3 id="其它HTML支持-Other-HTML-Support"><a href="#其它HTML支持-Other-HTML-Support" class="headerlink" title="其它HTML支持 (Other HTML Support)"></a>其它HTML支持 (Other HTML Support)</h3><p>你可以在 <a href="https://support.typora.io/HTML/">这里</a>找到更多信息.</p>
]]></content>
      <categories>
        <category>参考文档</category>
      </categories>
      <tags>
        <tag>文档</tag>
      </tags>
  </entry>
  <entry>
    <title>回答的艺术</title>
    <url>/nav/categories/%E9%97%B2%E8%81%8A/%E5%9B%9E%E7%AD%94%E7%9A%84%E8%89%BA%E6%9C%AF/</url>
    <content><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h3 id="为什么需要这篇文章"><a href="#为什么需要这篇文章" class="headerlink" title="为什么需要这篇文章"></a>为什么需要这篇文章</h3><p>互联网上对提问者的要求越来越高，这一点在“极客”群体当中尤为明显。对于一些他们认为基础的问题，他们会直接用STFW（去网上查）和RTFM（去读文档）来搪塞过去。或许正是这样的行为，让人们对极客们留下了“傲慢并不善言谈”的刻板印象。</p>
<p>本文作为《提问的智慧》的非官方姊妹篇（之一？），意在解决这个问题，协助热情好客的专家们回答领域内新手们或许有些幼稚的提问。永远记住：</p>
<ol>
<li><strong>每一个人最初都是新手。</strong></li>
<li><strong>不要对新手有任何的要求，因为他们真的什么也不知道，而这是可以被原谅的。</strong></li>
</ol>
<h3 id="基本策略"><a href="#基本策略" class="headerlink" title="基本策略"></a>基本策略</h3><p>至少大多数的专家们最开始都是友善的。但是在长期回答一些没有什么思维深度的“基础问题”<br>之后，他们也往往筋疲力竭，最终不得不总结出三句“基本策略”：</p>
<ul>
<li>上策直接不理</li>
<li>中策息事宁人</li>
<li>下策喷中带骂</li>
</ul>
<p>并根据对方的难缠程度选择对应的策略让对方“知难而退”。选择“上策”和“下策”始终是你的权利。当你阅读下文时，你可能会反对部分观点，并且不愿意为部分（或者全部）提问者提供帮助；这是无可厚非的。但是，既然你愿意读到这里，并如此坚定地想要寻找正确的帮助他人的方式，相信你一定是一位热心的助人为乐者，而愿意选择“中策”。这样，你大可以翻过接下来这一节。</p>
<h3 id="为什么要回答“基础”的问题，这对我有什么好处？"><a href="#为什么要回答“基础”的问题，这对我有什么好处？" class="headerlink" title="为什么要回答“基础”的问题，这对我有什么好处？"></a>为什么要回答“基础”的问题，这对我有什么好处？</h3><p>第一要提出的是“知识的诅咒”。当你在思考问题或交流时，你会认为你所知道的知识都是理所当然的，从而无法想象出不知道这些知识的情况下该如何思考。而一位新人突然闯入你的聊天频道、对你早已当成常识的这些知识重新提问的时候，你有很好的理由站在一位初学者的角度重新思考。即便你只是把他当成小黄鸭，你也可以在表达的过程中纠正自己（可能存在但从未注意）的错误。或许你会发现一些从未思考过的细节或者方法，这是你在课堂上没有机会学到的。从头发明轮子不是坏事——如果是以学习为目的。</p>
<p>第二点也很重要：你可以锻炼自己对不同的角色说不同的话的能力。就好比编程中“封装”的概念一样，你对不同层次的提问者应当讲述不同层次的细节。比如，面对一位本专业的大三学生，既然他已经喝过两年的墨水，你大可以向他讲述一些比较深刻的原理以加深他的理解。可能你只是稍加点拨，就可以将他的知识体系串联起来。而另一个角度，当你面对一位急于完成自己作业、而几乎对专业背景一无所知的大一新生时，只需要以最精确最简便的方式解决他的问题就好——其他所有的“废话”都会遭致反感。</p>
<p>其他一些原因，比如你就是热情好客、乐于助人，你愿意帮助他人以获得社交上的成功，或者你认为帮助一位新人少走弯路是你作为前辈的责任，就见仁见智了。</p>
<h2 id="为什么提问者会选择“提问”"><a href="#为什么提问者会选择“提问”" class="headerlink" title="为什么提问者会选择“提问”"></a>为什么提问者会选择“提问”</h2><h3 id="当你回答问题的时候，你究竟帮他们做了什么？"><a href="#当你回答问题的时候，你究竟帮他们做了什么？" class="headerlink" title="当你回答问题的时候，你究竟帮他们做了什么？"></a>当你回答问题的时候，你究竟帮他们做了什么？</h3><p>互联网是庞大的，并且正在迅速地变得更加庞大。而且，在某些特殊的网络环境下，从广告和[数据删除]的夹缝中寻找真正有效的信息变得非常困难。很多新手在搜索框输入自己想尽办法整理出的几条关键词之后，都不得不面对顶部的4条广告和接踵而至的无数条互相复制粘贴、却和其真正关心的内容文不对题的博客，然后望而却步。但作为一个活生生的人，你所能做的比一个搜索引擎强太多了。</p>
<ol>
<li>你能够综合复杂的信息。你可以理解提问者提供的描述、截图，并且你会依靠你丰富的经验认识到问题真正之所在，而不是像搜索引擎一样仅仅提供与提问者的文本相似的结果。事实上，在靠近底层（例如计算机体系结构）、或者理论比较复杂（例如机器学习）等领域，表面上的问题和实际的成因经常是南辕北辙的。</li>
<li>你能够针对用户的进一步反馈进行排查。当提问者提供更多的描述时，你的思路会更加清晰，而搜索引擎会受到复杂语义的影响而可能更不准确。当然，你也可以指导提问者提供更多的信息，使得你们的对话更加高效。另外，<em>某些</em>搜索引擎会限制你输入的字符数目（如38个字符），在输入英文关键词的时候很容易超限。</li>
<li>你能够总结知识。你可以将相关的知识点结合提问者的实际案例讲给提问者，帮助其产生对于知识点更为客观而全面的认识。很多的博客在给出解决方案之后都会承认“最后我也没明白为什么……”或者干脆直接没了下文，于是提问者只能自己尽力去归纳（而往往是盲人摸象式的）。</li>
</ol>
<p>所以，站在提问者的角度，他们可以更加精确地找到问题所在的点，并且也可以学到更多的知识（如果他们想要的话）。他们或许可以节约5个多小时的时间，而你或许只付出了5分钟。从整个社会的角度来看，这也许是更高效的。</p>
<p>当然，每一个提问者都有学会检索信息和试错的义务。但不一定是在deadline前的最后一天。<strong>不一定是现在</strong>。</p>
<h3 id="引导他们去正确的地方提问-搜索"><a href="#引导他们去正确的地方提问-搜索" class="headerlink" title="引导他们去正确的地方提问/搜索"></a>引导他们去正确的地方提问/搜索</h3><p>正如很多新手分不清楚体系（architecture）和系统（system）一样，你很有可能会发现一位提问者走错了地方，但是对于其本人而言，这是他尽全力找到的“最接近”的场合。虽然这在一些人眼中就好比一位狂热的教徒冲进一位无神论者家中对他传教，但是更多的情况可能是一位友好的外地人向你打了个招呼之后，问你教堂在哪里（他并不知道你是无神论者）。所以，不必带着怨气，用1秒钟的时间贴上一条链接就好。</p>
<p>不要贴www.baidu.com。google也不行。这对提问者而言就像是在质问他“为什么你不去STFW呢”，而他一定会用“但凡我知道该查什么我都不会来这里发帖”回敬你。最好的选择是给他一篇经过了你的鉴定<strong>能够解决他的问题的文章</strong>的链接，至少请借助你的专业知识告诉他搜索时应当用哪几个关键词。如果他认为（或者你认为）只有活生生的人——而不是一个由电路和算法构成的推荐系统——才能解决他的问题，那么就带他去找他想要的专家。正如你不会用百度给你自己看病一样（或许你可以借鉴一下医生是怎么解决患者的问题的——他们要面临的困难比技术问题难多了，而他们还必须要保持好脾气）。</p>
<h3 id="引导他们避开一些“忌讳”"><a href="#引导他们避开一些“忌讳”" class="headerlink" title="引导他们避开一些“忌讳”"></a>引导他们避开一些“忌讳”</h3><p>提问者可能会受到一些阅历上的限制而并不知道一些忌讳。犯了《提问的智慧》里的常见错误算一个。在某些特殊的网络环境下<em>某些</em>链接打不开算一个。某些话题不能随意讨论算一个。当这些问题出现时，你应当委婉的告诉他们这些忌讳，因为这些忌讳是在绝大部分地方搜索不到的（正因为它是忌讳）。</p>
<p>另外一类的忌讳是，正如上文所述，某些网站（csdn，博客园，etc.）的内容质量是参差不齐的，而新手显然无法对内容进行判断。告诉他们不要去，告诉他们去官方网站，去开源项目repo的issue区，或者去专门的讨论组。他们应该得到这些警示。这些“忌讳”正是这样口口相传下来的；在找到更好的办法前，你可以继续口口相传下去。</p>
<h2 id="理解提问者的情绪"><a href="#理解提问者的情绪" class="headerlink" title="理解提问者的情绪"></a>理解提问者的情绪</h2><h3 id="体谅提问者，他们也许真的没有办法了"><a href="#体谅提问者，他们也许真的没有办法了" class="headerlink" title="体谅提问者，他们也许真的没有办法了"></a>体谅提问者，他们也许真的没有办法了</h3><p>看到这里，相信你已经做好了充分的准备——包括技术和心理上的——来帮助一位提问者了。那么你很有可能也会认同这个观点：提问者虽然在人格上和回答者是平等的，但是在他所提问的这个具体的技术问题上必然是处于劣势。也就是说，当你认为只需要“付出小小的努力”*的时候，提问者可能刚刚经历了一次攀登珠峰式的挑战。所以，你应当做出（在你能接受的范围内）尽可能多的妥协，来体谅提问者部分“loser”的表现。在面对珠峰时，大多数人都是“loser”。</p>
<p>你需要体谅他们的第一点就是提问者在反复尝试的过程中所积累的挫败感和焦虑感。也就是说，虽然他们尽力使用诚恳而谦逊的措辞，他们的表达当中也会无意中包含很多紧张情绪，例如“急，在线等”、“求求”、“今天是ddl最后一天”。如果你因此而感到不爽，并且将这种不爽反馈给提问者，那么他们反而可能歇斯底里，将所有的情绪释放在你身上。而这对你们本应该讨论的话题没有任何帮助。</p>
<p>第二点是体谅做不出自己作业的提问者。在部分学校，课程的设置并不是那么合理。例如，绝大多数工科院系都会安排大一新生学习“C语言程序设计”。而对于部分对内存是如何工作的完全一无所知的大一新生而言，让他们在两个课时内学会指针不如直接挂了他们算了。但是，这并不意味着他们日后不能成为优秀的计算机科学家、自动化流水线设计者、或是嵌入式工程师。他们只是需要继续学习下去而不被退学的机会（同时，copilot认为：他们只是在学校里学习了一些知识，而没有任何的实践经验）。所以直接打出“自己的作业自己做”无济于事；给他一个example，大部分的提问者都足够聪明、能够举一反三。同样，没有必要责怪他们没有安排好时间，因为他们实际上可能已经努力了一个星期，只是在最后时刻才选择了提问。这个时候反而应该表扬他们的勤奋。</p>
<p>另外，你还需要体谅思路完全错误的提问者。或许他们从第一步起就走上了完全相反的方向，或许他们写出了完全不忍直视但是勉强能够运行的东西，但是至少他们尝试过了。在试图和他们讲解的时候，他们或许还会陷在他们固有的思路当中，继续按照错误的思路尝试。你需要继续保持你的耐心，因为对于提问者而言，他们自己的尝试是他们对这个问题的第一印象，而第一印象往往是不那么容易被改变的。不要因此而怪罪他们“不把你的话当回事”。</p>
<h3 id="面对傲慢的提问者"><a href="#面对傲慢的提问者" class="headerlink" title="面对傲慢的提问者"></a>面对傲慢的提问者</h3><p>然而，部分质量过低的提问仍然值得筛选。注意，这里指的是提问，不是提问者；可能部分提问者在接受一两次教训之后会有所改进，请对事不对人。</p>
<p>提问者有时候会让你感觉到傲慢。比如“那您帮帮我呗”，在部分人眼中，虽然看起来很客气但是仿佛就像你欠他一样。但是正如上文所述，他可能已经付出了所有可能的努力，而这样的请求是他最后的尝试。如果你实在不愿意帮助这样的提问者，可以选择上策：“直接不理”。但是笔者相信社区当中应该会有更热心的同行愿意伸出援手。或许你也可以将自己提供的帮助服务明码标价，诚恳的提问者会接受你的开价的。</p>
<p>另一类傲慢的提问者会直接命令你帮他做事，而且（显然）不准备付出任何的回报。这已经脱离了“新手什么也不知道”的范畴，他不配得到任何人的帮助。很快他就会发现自己并不具有这种特权，例如他的账号可能会被封禁。节省你自己的时间，无需和他怄气。</p>
<h3 id="面对“杠精”"><a href="#面对“杠精”" class="headerlink" title="面对“杠精”"></a>面对“杠精”</h3><p>有一部分提问者会对您的回答继续追问。他们可能会认为他们的思路没有问题，或者你误解了他的意思，或者他有一些更好的思路。正如上文所述，这很大一部分原因是因为他们无法快速脱离他们惯有的思维方式，而这不是他们的错。如果你确定你对问题的理解没有偏差，那么你应该利用你的知识，给出无懈可击的回复，让提问者相信你的观点。</p>
<p>另一部分提问者会在已经完全理解你的答案之后开始“插科打诨”，例如故意说出一些刁钻的特例，类似“弱智吧”上的帖子（一个充满了抬杠问题的论坛，网友们往往只是去图一乐，并非真的具有智力缺陷）。大多数情况下他们是善意的，试图用蹩脚的幽默表达对你的感谢。如果你感觉到受到了冒犯，就告诉提问者下次不要这样做。如果你认为他们的特例其实是个好问题，那就继续回答。如果你感觉你已经尽到了你的职责，只需要离开这个界面，去做自己的事情。大部分提问者在自讨没趣之后会好好道谢的。</p>
<h2 id="完成你的回答"><a href="#完成你的回答" class="headerlink" title="完成你的回答"></a>完成你的回答</h2><h3 id="授之以渔"><a href="#授之以渔" class="headerlink" title="授之以渔"></a>授之以渔</h3><p>现在你已经筛选了一些提问，并且准备着手开始回答。接下来我们才真正开始探讨如何让你的回答更能真正帮到提问者。</p>
<p>提问者，特别是已经经过了充分尝试的提问者，对问题和解决方式已经有了一定程度的认知。但是正如上文所述，到了这一步还是没能解决问题，很有可能是因为走入了思维误区。所以引导他们走向正确的思考方式，或者引导他们发现问题的根本原因，是非常有必要的。以一个数字电路领域新人常见的误区为例。当初学者尝试写hdl，特别是那些支持行为描述的hdl的时候，他们会下意识地联想到他们最初所学的过程式编程语言。他们会无意中认为一个“程序”会一步一步地执行，推动数据的流动。而实际情况是，一个模块按照代码中所设计的逻辑被构造、甚至在将来被生产出来，电平信号会顺着电路“并行”地传播到每一个角落。所以当他们看到hdl当中的一个“循环”语句的时候会误以为只有一个状态机在快速运转，而不是数据通过级联的线网和选择器流到输出端，从而误判时序特性和电路延迟。如果你想真正帮到他们理解电路是什么样的，比起告诉他们如何“规范地编写hdl”，不如画出生成的电路的逻辑结构。喂给他们更多的行为描述hdl代码并不会有什么作用，只会让他们在现有的误区中越走越远。</p>
<p>有的时候你的态度需要强硬一些。当提问者缺乏某一项基础知识，就一定要敦促他们去学。在上面的例子中，如果提问者不理解组合逻辑和时序逻辑的区别，就让他们先系统学习数字电路设计原理，弄清楚锁存器、触发器等基础元件的实现原理再回来。一些理论或经典实践能够被广泛接受和应用并不是没有原因的，提问者应当学习并掌握它们。放任他们在错误的道路上摸索会为他们创造更大的困难，因为他们会越走越偏，而当他们回来问你的时候你会发现他们设计的思路之混乱已经超出了你的掌控范畴。这并不意味着要反对探索，而是要提防部分提问者并不是在探索而只是急于求成：他们只想尽快得到一个可以运行的东西，并不在意其中的原理，即便它只是“恰好”能运行而已；这对他们是没有帮助的。当他们在deadline到来之前把成果交上去之后，这些提问者应当重新整理自己的思路。</p>
<p>授之以渔能让提问者学会泛化问题、建立起学科的思维模式。按理说这一步骤确实应当是在课堂上完成的，但是<strong>并不是所有的学生都有那么一位足够优秀的老师，或者一本足够优秀的教材</strong>。当提问者完成了他们思想上的飞跃之后，你不仅仅可以让他们体会到自己解决问题的成就感，也可以避免他们下次再用相似的问题打扰你的工作。</p>
<h3 id="有时候，授之以鱼也不一定是坏事"><a href="#有时候，授之以鱼也不一定是坏事" class="headerlink" title="有时候，授之以鱼也不一定是坏事"></a>有时候，授之以鱼也不一定是坏事</h3><p>子曰：“求也退，故进之；由也兼人，故退之。” 对于另一类自我学习能力较强、而且擅长从案例和实践中归纳出理论的提问者而言，给他们一个例子或许就是对他们最直接的帮助。</p>
<p>一般这一类提问者会告知他们已经理解了所需的理论，只不过在一些语法之类的细节上遇到了一些困难，同时也不知道如何查询实现方法。这属于是“将理论书面化”的过程，而其难点在于：如果不知道确切的术语，那么是无法去进行搜索的。换言之，如果你知道该用什么关键字去搜索，你就已经完成了书面化的过程，从而也就不需要帮助了。所以这一类提问会使用一些模棱两可的描述，或者一些不符合实际语法、但是大致能描述提问者意思的“伪代码”。当遇到这种情况时，你只需要给出对应的“真代码”或者术语，他们就能够很快通过检索解决问题。</p>
<p>另一种情况是，当你在授之以渔的过程中，你可能会发现提问者的知识储备完全无法帮助他完成思考。如前文所述，这个时候就需要锻炼你“讲不同的话”的能力了。你需要尽可能隐藏掉提问者暂时无法深入理解的细节，而用尽可能具体、简单的方式快速完成对方的需求。一个经典的例子是，给小学生讲解20以内加法的时候，并没有必要为他们定义Church整数，也没有必要证明整数加法是一个阿贝尔群。另一个更常见的例子是，在讲解C语言的scanf函数时，告诉学生接受输入的变量前面要加一个“&amp;”号，因为这是“语法规范”（实际上不完全是）。而直到7个课时之后、讲到指针的时候才具体解释“&amp;”运算符的具体含义，以及scanf函数的工作原理。</p>
<p>同时，当一些提问者在进行一些匪夷所思而可能会造成严重后果的操作（比如经典的rm -rf /*）时，你或许会觉得自己有义务防止一场灾难的发生。有时这些危险会更加隐晦，比如在C语言当中打开了一个指向指向某个目录的FILE，同样也可能导致目录结构的损坏。在这种情况下，应当先将这些后果告知提问者，即便他们暂时无法理解也要求他们先将其当做禁忌。</p>
<h3 id="有时候他们的问题并不是那么没有深度"><a href="#有时候他们的问题并不是那么没有深度" class="headerlink" title="有时候他们的问题并不是那么没有深度"></a>有时候他们的问题并不是那么没有深度</h3><p>从另一个角度来看，如果你认为你需要“隐藏一些细节”，那说明实际上这个问题背后还是有很多细节是<em>值得深究</em>的。如今的“商业级”产品每一件都包含着一套完整的工业体系。还是以C语言的scanf为例。当一个提问者问“scanf是怎么实现的”的时候，他可能是从编程语言的角度考虑输入的字符串如何被格式化、可能是从操作系统的角度考虑scanf需要调用哪些系统调用或者进入内核态后还需要哪些其他的行为、或者是从计算机组成的角度考虑外设如何寻址以及输入如何编码，诸如此类。其中每一个项目都值得单独开设一门课程。虽然这并不意味着你作为一个回答者需要像真的开设这样一门课程一样细致入微地讲解，但保持敬畏可以帮你避免错过一些真正的好问题。</p>
<h3 id="让你的付出更有价值"><a href="#让你的付出更有价值" class="headerlink" title="让你的付出更有价值"></a>让你的付出更有价值</h3><p>现在你已经花了很大的功夫完成了你的回答，你的提问者解决了问题，并给了你正面的反馈。或许你希望通过一次的付出就能够帮助到更多的人。或许你希望在下一次面对同样的问题时节省时间。如果你是在一个提问网站（如quora、Stack Overflow）上进行回答，那是最好不过，因为你可以直接记录下这个问题的链接。如果你是在即时聊天平台上回答问题，或许可以考虑整理一个FAQ文档（正如本文档一样），并且发布在适当的场合；如果有需要的话还可以进行动态更新。这样，新来的提问者就更有可能STFW找到你的文档，从而在提问之前就解决了问题。</p>
<h2 id="鸣谢"><a href="#鸣谢" class="headerlink" title="鸣谢"></a>鸣谢</h2><ul>
<li>感谢<a href="http://www.catb.org/~esr/faqs/smart-questions.html">《提问的智慧》</a>提供的、针对提问者的建议。</li>
<li>转载源自网络</li>
</ul>
]]></content>
      <categories>
        <category>闲聊</category>
      </categories>
      <tags>
        <tag>阅读</tag>
      </tags>
  </entry>
</search>
